<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hfut.mapper.ExprimentMapper">
    <resultMap id="BaseResultMap" type="com.hfut.entity.Expriment">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <id column="teacher" property="teacher" jdbcType="VARCHAR"/>
        <id column="lesson" property="lesson" jdbcType="VARCHAR"/>
        <id column="years" property="years" jdbcType="INTEGER"/>
        <id column="teach_class" property="teachClass" jdbcType="INTEGER"/>
        <result column="grades" property="grades" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="CHAR"/>
        <result column="peroid" property="peroid" jdbcType="REAL"/>
        <result column="people" property="people" jdbcType="INTEGER"/>
        <result column="credit" property="credit" jdbcType="REAL"/>
        <result column="coefficient" property="coefficient" jdbcType="REAL"/>
        <result column="workload" property="workload" jdbcType="REAL"/>
        <result column="note" property="note" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, teacher, lesson, years, teach_class, grades, type, peroid, people, credit, coefficient,
        workload, note
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hfut.entity.ExprimentExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from expriment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <if test="limit != null">
            <if test="offset != null">
                limit ${offset}, ${limit}
            </if>
            <if test="offset == null">
                limit ${limit}
            </if>
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.hfut.entity.ExprimentKey">
        select
        <include refid="Base_Column_List"/>
        from expriment
        where id = #{id,jdbcType=INTEGER}
        and teacher = #{teacher,jdbcType=VARCHAR}
        and lesson = #{lesson,jdbcType=VARCHAR}
        and years = #{years,jdbcType=INTEGER}
        and teach_class = #{teachClass,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="com.hfut.entity.ExprimentKey">
        delete from expriment
        where id = #{id,jdbcType=INTEGER}
        and teacher = #{teacher,jdbcType=VARCHAR}
        and lesson = #{lesson,jdbcType=VARCHAR}
        and years = #{years,jdbcType=INTEGER}
        and teach_class = #{teachClass,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.hfut.entity.ExprimentExample">
        delete from expriment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.hfut.entity.Expriment">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into expriment (teacher, lesson, years,
        teach_class, grades, type,
        peroid, people, credit, coefficient,
        workload, note)
        values (#{teacher,jdbcType=VARCHAR}, #{lesson,jdbcType=VARCHAR}, #{years,jdbcType=INTEGER},
        #{teachClass,jdbcType=INTEGER}, #{grades,jdbcType=VARCHAR}, #{type,jdbcType=CHAR},
        #{peroid,jdbcType=REAL}, #{people,jdbcType=INTEGER}, #{credit,jdbcType=REAL}, #{coefficient,jdbcType=REAL},
        #{workload,jdbcType=REAL}, #{note,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.hfut.entity.Expriment">
        <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into expriment
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="teacher != null">
                teacher,
            </if>
            <if test="lesson != null">
                lesson,
            </if>
            <if test="years != null">
                years,
            </if>
            <if test="teachClass != null">
                teach_class,
            </if>
            <if test="grades != null">
                grades,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="peroid != null">
                peroid,
            </if>
            <if test="people != null">
                people,
            </if>
            <if test="credit != null">
                credit,
            </if>
            <if test="coefficient != null">
                coefficient,
            </if>
            <if test="workload != null">
                workload,
            </if>
            <if test="note != null">
                note,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="teacher != null">
                #{teacher,jdbcType=VARCHAR},
            </if>
            <if test="lesson != null">
                #{lesson,jdbcType=VARCHAR},
            </if>
            <if test="years != null">
                #{years,jdbcType=INTEGER},
            </if>
            <if test="teachClass != null">
                #{teachClass,jdbcType=INTEGER},
            </if>
            <if test="grades != null">
                #{grades,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=CHAR},
            </if>
            <if test="peroid != null">
                #{peroid,jdbcType=REAL},
            </if>
            <if test="people != null">
                #{people,jdbcType=INTEGER},
            </if>
            <if test="credit != null">
                #{credit,jdbcType=REAL},
            </if>
            <if test="coefficient != null">
                #{coefficient,jdbcType=REAL},
            </if>
            <if test="workload != null">
                #{workload,jdbcType=REAL},
            </if>
            <if test="note != null">
                #{note,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.hfut.entity.ExprimentExample" resultType="java.lang.Integer">
        select count(*) from expriment
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update expriment
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.teacher != null">
                teacher = #{record.teacher,jdbcType=VARCHAR},
            </if>
            <if test="record.lesson != null">
                lesson = #{record.lesson,jdbcType=VARCHAR},
            </if>
            <if test="record.years != null">
                years = #{record.years,jdbcType=INTEGER},
            </if>
            <if test="record.teachClass != null">
                teach_class = #{record.teachClass,jdbcType=INTEGER},
            </if>
            <if test="record.grades != null">
                grades = #{record.grades,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=CHAR},
            </if>
            <if test="record.peroid != null">
                peroid = #{record.peroid,jdbcType=REAL},
            </if>
            <if test="record.people != null">
                people = #{record.people,jdbcType=INTEGER},
            </if>
            <if test="record.credit != null">
                credit = #{record.credit,jdbcType=REAL},
            </if>
            <if test="record.coefficient != null">
                coefficient = #{record.coefficient,jdbcType=REAL},
            </if>
            <if test="record.workload != null">
                workload = #{record.workload,jdbcType=REAL},
            </if>
            <if test="record.note != null">
                note = #{record.note,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update expriment
        set id = #{record.id,jdbcType=INTEGER},
        teacher = #{record.teacher,jdbcType=VARCHAR},
        lesson = #{record.lesson,jdbcType=VARCHAR},
        years = #{record.years,jdbcType=INTEGER},
        teach_class = #{record.teachClass,jdbcType=INTEGER},
        grades = #{record.grades,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=CHAR},
        peroid = #{record.peroid,jdbcType=REAL},
        people = #{record.people,jdbcType=INTEGER},
        credit = #{record.credit,jdbcType=REAL},
        coefficient = #{record.coefficient,jdbcType=REAL},
        workload = #{record.workload,jdbcType=REAL},
        note = #{record.note,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.hfut.entity.Expriment">
        update expriment
        <set>
            <if test="grades != null">
                grades = #{grades,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=CHAR},
            </if>
            <if test="peroid != null">
                peroid = #{peroid,jdbcType=REAL},
            </if>
            <if test="people != null">
                people = #{people,jdbcType=INTEGER},
            </if>
            <if test="credit != null">
                credit = #{credit,jdbcType=REAL},
            </if>
            <if test="coefficient != null">
                coefficient = #{coefficient,jdbcType=REAL},
            </if>
            <if test="workload != null">
                workload = #{workload,jdbcType=REAL},
            </if>
            <if test="note != null">
                note = #{note,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
        and teacher = #{teacher,jdbcType=VARCHAR}
        and lesson = #{lesson,jdbcType=VARCHAR}
        and years = #{years,jdbcType=INTEGER}
        and teach_class = #{teachClass,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.hfut.entity.Expriment">
        update expriment
        set grades = #{grades,jdbcType=VARCHAR},
        type = #{type,jdbcType=CHAR},
        peroid = #{peroid,jdbcType=REAL},
        people = #{people,jdbcType=INTEGER},
        credit = #{credit,jdbcType=REAL},
        coefficient = #{coefficient,jdbcType=REAL},
        workload = #{workload,jdbcType=REAL},
        note = #{note,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
        and teacher = #{teacher,jdbcType=VARCHAR}
        and lesson = #{lesson,jdbcType=VARCHAR}
        and years = #{years,jdbcType=INTEGER}
        and teach_class = #{teachClass,jdbcType=INTEGER}
    </update>
</mapper>