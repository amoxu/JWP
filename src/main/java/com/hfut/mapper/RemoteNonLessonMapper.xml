<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hfut.mapper.RemoteNonLessonMapper" >
  <resultMap id="BaseResultMap" type="com.hfut.entity.RemoteNonLesson" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <id column="teacher" property="teacher" jdbcType="VARCHAR" />
    <id column="years" property="years" jdbcType="INTEGER" />
    <result column="colleage" property="colleage" jdbcType="VARCHAR" />
    <result column="days" property="days" jdbcType="INTEGER" />
    <result column="weeks" property="weeks" jdbcType="INTEGER" />
    <result column="alldays" property="alldays" jdbcType="INTEGER" />
    <result column="allownce" property="allownce" jdbcType="REAL" />
    <result column="note" property="note" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, teacher, years, colleage, days, weeks, alldays, allownce, note
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.hfut.entity.RemoteNonLessonExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from remote_non_lesson
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.hfut.entity.RemoteNonLessonKey" >
    select 
    <include refid="Base_Column_List" />
    from remote_non_lesson
    where id = #{id,jdbcType=INTEGER}
      and teacher = #{teacher,jdbcType=VARCHAR}
      and years = #{years,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.hfut.entity.RemoteNonLessonKey" >
    delete from remote_non_lesson
    where id = #{id,jdbcType=INTEGER}
      and teacher = #{teacher,jdbcType=VARCHAR}
      and years = #{years,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hfut.entity.RemoteNonLessonExample" >
    delete from remote_non_lesson
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hfut.entity.RemoteNonLesson" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into remote_non_lesson (teacher, years, colleage, 
      days, weeks, alldays, 
      allownce, note)
    values (#{teacher,jdbcType=VARCHAR}, #{years,jdbcType=INTEGER}, #{colleage,jdbcType=VARCHAR}, 
      #{days,jdbcType=INTEGER}, #{weeks,jdbcType=INTEGER}, #{alldays,jdbcType=INTEGER}, 
      #{allownce,jdbcType=REAL}, #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.hfut.entity.RemoteNonLesson" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into remote_non_lesson
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="teacher != null" >
        teacher,
      </if>
      <if test="years != null" >
        years,
      </if>
      <if test="colleage != null" >
        colleage,
      </if>
      <if test="days != null" >
        days,
      </if>
      <if test="weeks != null" >
        weeks,
      </if>
      <if test="alldays != null" >
        alldays,
      </if>
      <if test="allownce != null" >
        allownce,
      </if>
      <if test="note != null" >
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="teacher != null" >
        #{teacher,jdbcType=VARCHAR},
      </if>
      <if test="years != null" >
        #{years,jdbcType=INTEGER},
      </if>
      <if test="colleage != null" >
        #{colleage,jdbcType=VARCHAR},
      </if>
      <if test="days != null" >
        #{days,jdbcType=INTEGER},
      </if>
      <if test="weeks != null" >
        #{weeks,jdbcType=INTEGER},
      </if>
      <if test="alldays != null" >
        #{alldays,jdbcType=INTEGER},
      </if>
      <if test="allownce != null" >
        #{allownce,jdbcType=REAL},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hfut.entity.RemoteNonLessonExample" resultType="java.lang.Integer" >
    select count(*) from remote_non_lesson
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update remote_non_lesson
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.teacher != null" >
        teacher = #{record.teacher,jdbcType=VARCHAR},
      </if>
      <if test="record.years != null" >
        years = #{record.years,jdbcType=INTEGER},
      </if>
      <if test="record.colleage != null" >
        colleage = #{record.colleage,jdbcType=VARCHAR},
      </if>
      <if test="record.days != null" >
        days = #{record.days,jdbcType=INTEGER},
      </if>
      <if test="record.weeks != null" >
        weeks = #{record.weeks,jdbcType=INTEGER},
      </if>
      <if test="record.alldays != null" >
        alldays = #{record.alldays,jdbcType=INTEGER},
      </if>
      <if test="record.allownce != null" >
        allownce = #{record.allownce,jdbcType=REAL},
      </if>
      <if test="record.note != null" >
        note = #{record.note,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update remote_non_lesson
    set id = #{record.id,jdbcType=INTEGER},
      teacher = #{record.teacher,jdbcType=VARCHAR},
      years = #{record.years,jdbcType=INTEGER},
      colleage = #{record.colleage,jdbcType=VARCHAR},
      days = #{record.days,jdbcType=INTEGER},
      weeks = #{record.weeks,jdbcType=INTEGER},
      alldays = #{record.alldays,jdbcType=INTEGER},
      allownce = #{record.allownce,jdbcType=REAL},
      note = #{record.note,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hfut.entity.RemoteNonLesson" >
    update remote_non_lesson
    <set >
      <if test="colleage != null" >
        colleage = #{colleage,jdbcType=VARCHAR},
      </if>
      <if test="days != null" >
        days = #{days,jdbcType=INTEGER},
      </if>
      <if test="weeks != null" >
        weeks = #{weeks,jdbcType=INTEGER},
      </if>
      <if test="alldays != null" >
        alldays = #{alldays,jdbcType=INTEGER},
      </if>
      <if test="allownce != null" >
        allownce = #{allownce,jdbcType=REAL},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
      and teacher = #{teacher,jdbcType=VARCHAR}
      and years = #{years,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hfut.entity.RemoteNonLesson" >
    update remote_non_lesson
    set colleage = #{colleage,jdbcType=VARCHAR},
      days = #{days,jdbcType=INTEGER},
      weeks = #{weeks,jdbcType=INTEGER},
      alldays = #{alldays,jdbcType=INTEGER},
      allownce = #{allownce,jdbcType=REAL},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
      and teacher = #{teacher,jdbcType=VARCHAR}
      and years = #{years,jdbcType=INTEGER}
  </update>
</mapper>